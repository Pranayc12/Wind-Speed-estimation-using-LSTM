# -*- coding: utf-8 -*-
"""WIND SPEED ESTIMATION.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Oijb1FbbfqMVVyp4doCUvCDzz840cAdQ
"""

import numpy as np
from keras.models import Sequential
from keras.layers import LSTM,Dense
import pandas as pd
from matplotlib import pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler

df = pd.read_csv(r"/content/drive/MyDrive/windspeed_data.csv")


train_dates= pd.to_datetime(df['DATE'])
df.isnull()

cols1 = list(df)[3:]
df_for_training = df[cols1].astype(float)
df_for_plot=df_for_training.tail(500)
df_for_plot.plot.line()

scaler = StandardScaler()
scaler = scaler.fit(df_for_training)
df_for_training_scaled = scaler.transform(df_for_training)

#reshaping data:
trainX = []
trainY = []

n_future = 1
n_past=15

for i in range(n_past, len(df_for_training_scaled)-n_future + 1):
    trainX.append(df_for_training_scaled[i-n_past:i, 0:df_for_training.shape[1]])
    trainY.append(df_for_training_scaled[i+n_future-1:i+n_future, 0])
    
trainX,trainY = np.array(trainX),np.array(trainY)

print("trainX_shape=={}.".format(trainX.shape))
print("trainY_shape=={}".format(trainY.shape))

#autoencoder model
from keras.layers import Dropout

model = Sequential()
model.add(LSTM(64,activation = "relu",input_shape = (trainX.shape[1],trainX.shape[2]),return_sequences=True)) 
model.add(LSTM(32,activation = 'relu',return_sequences=False))
model.add(Dropout(0.3))
model.add(Dense(trainY.shape[1]))

model.summary()

model.compile(optimizer= 'adam',loss = "mse")

history = model.fit(trainX,trainY,epochs=50,batch_size = 32,validation_split=0.1,verbose=1)

#predicting wind speed for 90 days in future
n_future=90
forecast = model.predict(trainX[-n_future:])

plt.plot(history.history["loss"],label = "training Loss")
plt.plot(history.history["val_loss"],label =  "Validation loss")
plt.legend()

#performing inverse transform
forecast_copies= np.repeat(forecast, df_for_training.shape[1],axis=-1)
y_pred_future = scaler.inverse_transform(forecast_copies)[:,0]

print(train_dates)

forecast_period_dates =pd.date_range(list(train_dates)[-1],periods = n_future, freq = "1d")

forecast = model.predict(trainX[-n_future:])

forecast_dates = []
for time in forecast_period_dates:
  forecast_dates.append(time.date())

df_forecast = pd.DataFrame({"Date":np.array(forecast_dates),"Wind":y_pred_future})
df_forecast["Date"]=pd.to_datetime(df_forecast["Date"])

df_1=pd.read_csv(r"/content/drive/MyDrive/windspeed_data.csv")
df_1.head()

original = df_1[["DATE","WIND"]]
original["Date"] = pd.to_datetime(original["DATE"])
original = original.loc[original["DATE"]>="31-12-1978"]

sns.lineplot(df_forecast["Date"],df_forecast["Wind"])
sns.lineplot(original["DATE"][6568:],original["WIND"][6568:],palette="red")

df.tail(20)

display(df_forecast)

df_forecast.to_csv("Wind_speed_prediction.csv")

